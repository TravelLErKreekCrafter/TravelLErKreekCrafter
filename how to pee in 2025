#include <iostream>
#include <thread>
#include <chrono>
#include <string>
#include <unordered_map>

using namespace std;

unordered_map<string, string> loginDatabase;

void displayMenu(bool isLoggedIn, bool isAdmin);

void checkForUpdates() {
    cout << "checking for updates..." << endl;
    this_thread::sleep_for(chrono::seconds(1));
    cout << "checking for old versions..." << endl;
    // Simulate deleting old versions
    this_thread::sleep_for(chrono::seconds(2));
    cout << "loading...";
    this_thread::sleep_for(chrono::seconds(7));
    cout << endl;
}

bool validateLogin(const string& username, const string& password) {
    return loginDatabase.find(username) != loginDatabase.end() && loginDatabase[username] == password;
}

void adminLogin() {
    loginDatabase["kreekcrafter"] = "William135#";
}

void loginGen() {
    string newUsername, newPassword;
    cout << "Enter new username: ";
    cin >> newUsername;
    cout << "Enter new password: ";
    cin >> newPassword;
    loginDatabase[newUsername] = newPassword;
    cout << "Login generated successfully!" << endl;
}

void showFeatures() {
    int choice;
    bool isLoggedIn = false, isAdmin = false;
    string username, password;

    while (true) {
        displayMenu(isLoggedIn, isAdmin);
        cin >> choice;

        if (choice == 5) { // Login
            cout << "Enter username: ";
            cin >> username;
            cout << "Enter password: ";
            cin >> password;
            isLoggedIn = validateLogin(username, password);
            if (isLoggedIn && username == "kreekcrafter" && password == "William135#") {
                isAdmin = true;
            }
            if (isLoggedIn) {
                cout << "Login successful!" << endl;
            } else {
                cout << "Invalid credentials!" << endl;
            }
        } else if (isLoggedIn) {
            switch (choice) {
                case 1:
                    cout << "Aim feature enabled" << endl;

                    break;
                case 2:
                    cout << "Visuals feature enabled" << endl;
                    break;
                case 3:
                    cout << "Settings feature enabled" << endl;
                    break;
                case 4:
                    cout << "Updates feature enabled" << endl;
                    break;
                case 6:
                    if (isAdmin) {
                        loginGen();
                    }
                    break;
                default:
                    cout << "Invalid choice!" << endl;
            }
        } else {
            cout << "Please login to access this feature." << endl;
        }
    }
}

void displayMenu(bool isLoggedIn, bool isAdmin) {
    cout << "Select option from the menu:" << endl;
    cout << "1. Aim" << endl;
    cout << "2. Visuals" << endl;
    cout << "3. Settings" << endl;
    cout << "4. Updates" << endl;
    cout << "5. Login" << endl;
    if (isAdmin) {
        cout << "6. Login Gen" << endl;
    }
}

int main() {
    adminLogin();
    checkForUpdates();
    showFeatures();
    return 0;
}